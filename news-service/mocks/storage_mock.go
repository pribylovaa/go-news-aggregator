// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pribylovaa/go-news-aggregator/news-service/internal/models"
)

// MockNewsStorage is a mock of NewsStorage interface.
type MockNewsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockNewsStorageMockRecorder
}

// MockNewsStorageMockRecorder is the mock recorder for MockNewsStorage.
type MockNewsStorageMockRecorder struct {
	mock *MockNewsStorage
}

// NewMockNewsStorage creates a new mock instance.
func NewMockNewsStorage(ctrl *gomock.Controller) *MockNewsStorage {
	mock := &MockNewsStorage{ctrl: ctrl}
	mock.recorder = &MockNewsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsStorage) EXPECT() *MockNewsStorageMockRecorder {
	return m.recorder
}

// ListNews mocks base method.
func (m *MockNewsStorage) ListNews(ctx context.Context, opts models.ListOptions) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNews", ctx, opts)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNews indicates an expected call of ListNews.
func (mr *MockNewsStorageMockRecorder) ListNews(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNews", reflect.TypeOf((*MockNewsStorage)(nil).ListNews), ctx, opts)
}

// NewsByID mocks base method.
func (m *MockNewsStorage) NewsByID(ctx context.Context, id string) (*models.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsByID", ctx, id)
	ret0, _ := ret[0].(*models.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewsByID indicates an expected call of NewsByID.
func (mr *MockNewsStorageMockRecorder) NewsByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsByID", reflect.TypeOf((*MockNewsStorage)(nil).NewsByID), ctx, id)
}

// SaveNews mocks base method.
func (m *MockNewsStorage) SaveNews(ctx context.Context, items []models.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNews", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNews indicates an expected call of SaveNews.
func (mr *MockNewsStorageMockRecorder) SaveNews(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNews", reflect.TypeOf((*MockNewsStorage)(nil).SaveNews), ctx, items)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// ListNews mocks base method.
func (m *MockStorage) ListNews(ctx context.Context, opts models.ListOptions) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNews", ctx, opts)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNews indicates an expected call of ListNews.
func (mr *MockStorageMockRecorder) ListNews(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNews", reflect.TypeOf((*MockStorage)(nil).ListNews), ctx, opts)
}

// NewsByID mocks base method.
func (m *MockStorage) NewsByID(ctx context.Context, id string) (*models.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewsByID", ctx, id)
	ret0, _ := ret[0].(*models.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewsByID indicates an expected call of NewsByID.
func (mr *MockStorageMockRecorder) NewsByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewsByID", reflect.TypeOf((*MockStorage)(nil).NewsByID), ctx, id)
}

// SaveNews mocks base method.
func (m *MockStorage) SaveNews(ctx context.Context, items []models.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNews", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNews indicates an expected call of SaveNews.
func (mr *MockStorageMockRecorder) SaveNews(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNews", reflect.TypeOf((*MockStorage)(nil).SaveNews), ctx, items)
}
