apiVersion: v1
kind: Namespace
metadata:
  name: logging
  labels:
    env: local
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vector
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "nodes"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vector
subjects:
  - kind: ServiceAccount
    name: vector
    namespace: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-config
  namespace: logging
data:
  vector.toml: |
    data_dir = "/vector-data"

    [sources.k8s_logs]
    type = "kubernetes_logs"
    extra_namespace_label_selector = 'kubernetes.io/metadata.name in (auth, api-gateway, comments, news, users)'

    [transforms.compact]
    type = "remap"
    inputs = ["k8s_logs"]
    source = """
    .event = {
      timestamp: now(),
      ns:       .kubernetes.pod_namespace,
      pod:      .kubernetes.pod_name,
      c:        .kubernetes.container_name,
      msg:      to_string!(.message)
    }
    . = .event
    """

    [sources.internal]
    type = "internal_logs"

    [sinks.to_console]
    type = "console"
    inputs = ["compact","internal"]
    encoding.codec = "json"

    [sinks.to_kafka]
    type = "kafka"
    inputs = ["compact"]
    bootstrap_servers = "192.168.64.6:9092"
    topic = "vector-logs"
    encoding.codec = "json"
    [sinks.to_kafka.healthcheck]
    enabled = false
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  namespace: logging
spec:
  selector:
    matchLabels: { app: vector }
  template:
    metadata:
      labels: { app: vector }
    spec:
      serviceAccountName: vector
      hostNetwork: false
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: vector
          image: timberio/vector:0.40.0-alpine
          imagePullPolicy: IfNotPresent
          args: ["-c", "/etc/vector/vector.toml"]
          env:
            - name: VECTOR_SELF_NODE_NAME
              valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
              ephemeral-storage: "100Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
              ephemeral-storage: "512Mi"
          volumeMounts:
            - { name: vector-config, mountPath: /etc/vector }
            - { name: data,         mountPath: /vector-data }
            - { name: varlog,       mountPath: /var/log, readOnly: true }
      volumes:
        - name: vector-config
          configMap:
            name: vector-config
            items:
              - { key: vector.toml, path: vector.toml }
        - name: data
          hostPath: { path: /var/lib/vector, type: DirectoryOrCreate }
        - name: varlog
          hostPath: { path: /var/log, type: Directory }
