// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pribylovaa/go-news-aggregator/users-service/internal/storage (interfaces: ProfilesStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/pribylovaa/go-news-aggregator/users-service/internal/models"
	storage "github.com/pribylovaa/go-news-aggregator/users-service/internal/storage"
)

// MockProfilesStorage is a mock of ProfilesStorage interface.
type MockProfilesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesStorageMockRecorder
}

// MockProfilesStorageMockRecorder is the mock recorder for MockProfilesStorage.
type MockProfilesStorageMockRecorder struct {
	mock *MockProfilesStorage
}

// NewMockProfilesStorage creates a new mock instance.
func NewMockProfilesStorage(ctrl *gomock.Controller) *MockProfilesStorage {
	mock := &MockProfilesStorage{ctrl: ctrl}
	mock.recorder = &MockProfilesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilesStorage) EXPECT() *MockProfilesStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProfilesStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProfilesStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProfilesStorage)(nil).Close))
}

// ConfirmAvatarUpload mocks base method.
func (m *MockProfilesStorage) ConfirmAvatarUpload(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmAvatarUpload", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmAvatarUpload indicates an expected call of ConfirmAvatarUpload.
func (mr *MockProfilesStorageMockRecorder) ConfirmAvatarUpload(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmAvatarUpload", reflect.TypeOf((*MockProfilesStorage)(nil).ConfirmAvatarUpload), arg0, arg1, arg2, arg3)
}

// CreateProfile mocks base method.
func (m *MockProfilesStorage) CreateProfile(arg0 context.Context, arg1 *models.Profile) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfilesStorageMockRecorder) CreateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfilesStorage)(nil).CreateProfile), arg0, arg1)
}

// ProfileByID mocks base method.
func (m *MockProfilesStorage) ProfileByID(arg0 context.Context, arg1 uuid.UUID) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfileByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProfileByID indicates an expected call of ProfileByID.
func (mr *MockProfilesStorageMockRecorder) ProfileByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileByID", reflect.TypeOf((*MockProfilesStorage)(nil).ProfileByID), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockProfilesStorage) UpdateProfile(arg0 context.Context, arg1 uuid.UUID, arg2 storage.ProfileUpdate) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfilesStorageMockRecorder) UpdateProfile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfilesStorage)(nil).UpdateProfile), arg0, arg1, arg2)
}
