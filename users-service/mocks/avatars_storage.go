// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pribylovaa/go-news-aggregator/users-service/internal/storage (interfaces: AvatarsStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	storage "github.com/pribylovaa/go-news-aggregator/users-service/internal/storage"
)

// MockAvatarsStorage is a mock of AvatarsStorage interface.
type MockAvatarsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarsStorageMockRecorder
}

// MockAvatarsStorageMockRecorder is the mock recorder for MockAvatarsStorage.
type MockAvatarsStorageMockRecorder struct {
	mock *MockAvatarsStorage
}

// NewMockAvatarsStorage creates a new mock instance.
func NewMockAvatarsStorage(ctrl *gomock.Controller) *MockAvatarsStorage {
	mock := &MockAvatarsStorage{ctrl: ctrl}
	mock.recorder = &MockAvatarsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarsStorage) EXPECT() *MockAvatarsStorageMockRecorder {
	return m.recorder
}

// AvatarUploadURL mocks base method.
func (m *MockAvatarsStorage) AvatarUploadURL(arg0 context.Context, arg1 uuid.UUID, arg2 string, arg3 int64) (*storage.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvatarUploadURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*storage.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvatarUploadURL indicates an expected call of AvatarUploadURL.
func (mr *MockAvatarsStorageMockRecorder) AvatarUploadURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvatarUploadURL", reflect.TypeOf((*MockAvatarsStorage)(nil).AvatarUploadURL), arg0, arg1, arg2, arg3)
}

// CheckAvatarUpload mocks base method.
func (m *MockAvatarsStorage) CheckAvatarUpload(arg0 context.Context, arg1 uuid.UUID, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAvatarUpload", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAvatarUpload indicates an expected call of CheckAvatarUpload.
func (mr *MockAvatarsStorageMockRecorder) CheckAvatarUpload(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAvatarUpload", reflect.TypeOf((*MockAvatarsStorage)(nil).CheckAvatarUpload), arg0, arg1, arg2)
}
