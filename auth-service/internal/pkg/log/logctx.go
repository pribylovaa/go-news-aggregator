// log предоставляет утилиты для работы с контекстным логгером (*slog.Logger).
//
// Концепция:
//   - Вложить логгер в context.Context на краю системы (интерсептор, middleware);
//   - Извлекать его в глубине стека вызовов без проброса параметров.
//
// Поведение:
//   - Ключ для хранения — приватный тип (исключены коллизии с чужими значениями);
//   - From никогда не возвращает nil: если логгера в контексте нет/значение неверного
//     типа/указатель nil — вернёт slog.Default();
//   - Функции не теряют/не модифицируют дедлайны/отмену контекста.
package log

import (
	"context"
	"log/slog"
)

// ctxKey — приватный ключ хранения логгера в контексте.
// Использование неэкспортируемого пустого типа исключает пересечение с чужими ключами.
type ctxKey struct{}

// Into кладёт логгер l в контекст ctx и возвращает новый контекст.
// Если передать l == nil, значение будет сохранено как nil — при извлечении
// From вернёт slog.Default(), т.е. поведение останется безопасным.
func Into(ctx context.Context, l *slog.Logger) context.Context {
	return context.WithValue(ctx, ctxKey{}, l)
}

// From извлекает *slog.Logger из контекста.
// Контракт:
//   - Никогда не возвращает nil;
//   - При отсутствии значения, неверном типе либо если в контексте лежит *slog.Logger(nil),
//     возвращает slog.Default().
func From(ctx context.Context) *slog.Logger {
	if v := ctx.Value(ctxKey{}); v != nil {
		if l, ok := v.(*slog.Logger); ok && l != nil {
			return l
		}
	}

	return slog.Default()
}
