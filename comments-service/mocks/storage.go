// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pribylovaa/go-news-aggregator/comments-service/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close), ctx)
}

// CommentByID mocks base method.
func (m *MockStorage) CommentByID(ctx context.Context, id string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentByID", ctx, id)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentByID indicates an expected call of CommentByID.
func (mr *MockStorageMockRecorder) CommentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentByID", reflect.TypeOf((*MockStorage)(nil).CommentByID), ctx, id)
}

// CreateComment mocks base method.
func (m *MockStorage) CreateComment(ctx context.Context, comment models.Comment) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStorageMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStorage)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockStorage) DeleteComment(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStorageMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStorage)(nil).DeleteComment), ctx, id)
}

// ListByNews mocks base method.
func (m *MockStorage) ListByNews(ctx context.Context, newsID string, p models.ListParams) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByNews", ctx, newsID, p)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByNews indicates an expected call of ListByNews.
func (mr *MockStorageMockRecorder) ListByNews(ctx, newsID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByNews", reflect.TypeOf((*MockStorage)(nil).ListByNews), ctx, newsID, p)
}

// ListReplies mocks base method.
func (m *MockStorage) ListReplies(ctx context.Context, parentID string, p models.ListParams) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplies", ctx, parentID, p)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReplies indicates an expected call of ListReplies.
func (mr *MockStorageMockRecorder) ListReplies(ctx, parentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplies", reflect.TypeOf((*MockStorage)(nil).ListReplies), ctx, parentID, p)
}
