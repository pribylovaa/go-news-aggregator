// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: comments.proto

package commentsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommentsService_CreateComment_FullMethodName = "/comments.v1.CommentsService/CreateComment"
	CommentsService_DeleteComment_FullMethodName = "/comments.v1.CommentsService/DeleteComment"
	CommentsService_CommentByID_FullMethodName   = "/comments.v1.CommentsService/CommentByID"
	CommentsService_ListByNews_FullMethodName    = "/comments.v1.CommentsService/ListByNews"
	CommentsService_ListReplies_FullMethodName   = "/comments.v1.CommentsService/ListReplies"
)

// CommentsServiceClient is the client API for CommentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	CommentByID(ctx context.Context, in *CommentByIDRequest, opts ...grpc.CallOption) (*CommentByIDResponse, error)
	// Список комментариев по новости (корневых), сначала новые.
	ListByNews(ctx context.Context, in *ListByNewsRequest, opts ...grpc.CallOption) (*ListByNewsResponse, error)
	// Подзагрузка ответов для ветки (дети одного parent_id), сначала старые.
	ListReplies(ctx context.Context, in *ListRepliesRequest, opts ...grpc.CallOption) (*ListRepliesResponse, error)
}

type commentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsServiceClient(cc grpc.ClientConnInterface) CommentsServiceClient {
	return &commentsServiceClient{cc}
}

func (c *commentsServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, CommentsService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CommentsService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) CommentByID(ctx context.Context, in *CommentByIDRequest, opts ...grpc.CallOption) (*CommentByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentByIDResponse)
	err := c.cc.Invoke(ctx, CommentsService_CommentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) ListByNews(ctx context.Context, in *ListByNewsRequest, opts ...grpc.CallOption) (*ListByNewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListByNewsResponse)
	err := c.cc.Invoke(ctx, CommentsService_ListByNews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) ListReplies(ctx context.Context, in *ListRepliesRequest, opts ...grpc.CallOption) (*ListRepliesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepliesResponse)
	err := c.cc.Invoke(ctx, CommentsService_ListReplies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServiceServer is the server API for CommentsService service.
// All implementations must embed UnimplementedCommentsServiceServer
// for forward compatibility.
type CommentsServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	CommentByID(context.Context, *CommentByIDRequest) (*CommentByIDResponse, error)
	// Список комментариев по новости (корневых), сначала новые.
	ListByNews(context.Context, *ListByNewsRequest) (*ListByNewsResponse, error)
	// Подзагрузка ответов для ветки (дети одного parent_id), сначала старые.
	ListReplies(context.Context, *ListRepliesRequest) (*ListRepliesResponse, error)
	mustEmbedUnimplementedCommentsServiceServer()
}

// UnimplementedCommentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentsServiceServer struct{}

func (UnimplementedCommentsServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentsServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentsServiceServer) CommentByID(context.Context, *CommentByIDRequest) (*CommentByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentByID not implemented")
}
func (UnimplementedCommentsServiceServer) ListByNews(context.Context, *ListByNewsRequest) (*ListByNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNews not implemented")
}
func (UnimplementedCommentsServiceServer) ListReplies(context.Context, *ListRepliesRequest) (*ListRepliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplies not implemented")
}
func (UnimplementedCommentsServiceServer) mustEmbedUnimplementedCommentsServiceServer() {}
func (UnimplementedCommentsServiceServer) testEmbeddedByValue()                         {}

// UnsafeCommentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServiceServer will
// result in compilation errors.
type UnsafeCommentsServiceServer interface {
	mustEmbedUnimplementedCommentsServiceServer()
}

func RegisterCommentsServiceServer(s grpc.ServiceRegistrar, srv CommentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentsService_ServiceDesc, srv)
}

func _CommentsService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_CommentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).CommentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_CommentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).CommentByID(ctx, req.(*CommentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_ListByNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).ListByNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_ListByNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).ListByNews(ctx, req.(*ListByNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_ListReplies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).ListReplies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentsService_ListReplies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).ListReplies(ctx, req.(*ListRepliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsService_ServiceDesc is the grpc.ServiceDesc for CommentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comments.v1.CommentsService",
	HandlerType: (*CommentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentsService_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentsService_DeleteComment_Handler,
		},
		{
			MethodName: "CommentByID",
			Handler:    _CommentsService_CommentByID_Handler,
		},
		{
			MethodName: "ListByNews",
			Handler:    _CommentsService_ListByNews_Handler,
		},
		{
			MethodName: "ListReplies",
			Handler:    _CommentsService_ListReplies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments.proto",
}
